# Run me with:
#
#   $ watchr specs.watchr

# --------------------------------------------------
# Convenience Methods
# --------------------------------------------------
def clear_console
  puts "\e[H\e[2J"
end
def all_spec_files
  Dir['spec/**/*_spec.rb']
end

def run_spec_matching(thing_to_match)
  matches = all_spec_files.grep(/#{thing_to_match}/i)
  if matches.empty?
    puts "Sorry, but there were no matches for #{thing_to_match}."  
  else
    run matches.join(' ')
  end
end

def run(files_to_run)
  clear_console
  puts("Running: #{files_to_run}")
  result = %x(spec -cbfs #{files_to_run}).split("\n")
  growl result.last rescue nil
  puts "... Finished"
  no_int_for_you
end

def run_all_specs
  run(all_spec_files.join(' '))
end

# --------------------------------------------------
# Watchr Rules
# --------------------------------------------------
watch('^spec/(.*)_spec\.rb')                      { |m| run_spec_matching(m[1]) }
watch('^lib/(.*)\.rb')                            { |m| run_spec_matching(m[1]) }
watch('^app/(models|controllers)/(.*).rb')        { |m| run_spec_matching("#{m[1]}/#{m[2]}") }
watch('^spec/spec_helper\.rb')                    { run_all_specs }
watch('^spec/support/.*\.rb')                     { run_all_specs }
watch('^config/.*\.rb')                           { run_all_specs }


def growl(message)
  return if message.empty?
  puts "#{message}"
  growlnotify = `which growlnotify`.chomp
  @status = if !message.include?('0 failures')
              image = "~/.watchr/failed.png"
              priority = 2
              "failed"
            elsif message.include?("pending")
              image = "~/.watchr/pending.png"
              priority = 1
              "pending"
            else
              priority = -2
              image = "~/.watchr/passed.png"
              "passed"
            end
  options = "--name Watchr --image '#{File.expand_path(image)}' -m '#{message}' -p #{priority || 0}"
  system %(#{growlnotify} #{options} &)
end


# --------------------------------------------------
# Signal Handling
# --------------------------------------------------

def no_int_for_you
  @sent_an_int = nil
end

Signal.trap 'INT' do
  if @sent_an_int then
    system('clear')      
    puts "   Stopped watching."
    exit
  else
    puts "   Resetting tests... if you want to quit, press control-c again."
    @sent_an_int = true
    Kernel.sleep 1.5
    run_all_specs
  end
end

clear_console
puts "Watching..."
# vim:ft=ruby

= Mongify

A data translator from sql database to mongoDB.

Supports MySQL, PostgreSQL, SQLite, Oracle, SQLServer, and DB2 (Basically anything ActiveRecord has built-in)
Supports any version of MongoDB

Learn more about mongoDB at: http://www.mongodb.org

== Install

=== WARNING: This gem is still in very very early alpha

  gem install mongify

== Usage

=== WARNING: Mongify is still a work in progress.

===Building a configuration file:
In order for Mongify to do it's job, it needs to know where your databases are located.
Building a config file is as simple as this:

  sql_connection do
    adaptor "mysql"
    host "localhost"
    database "my_database"
  end

  mongodb_connection do
    host 'localhost'
    database 'my_collection'
  end

* You can omit the mongodb connection till you're ready to process your translation


=== Building or Generating a translation

==== Generating a translation
If you're database is large and complex, it might be a bit too much to hand write the translation file, Mongify can help by running the translate command:
  mongify transalte -c database.config
Or pipe it right into a file by running
  mongify transalte -c database.config > translation_file.rb

==== Building a translation
Building a translation is pretty straight forward. It looks something like this:

  table "users" do
    column "id", :key
    column "first_name", :string
    column "last_name", :string
    column "created_at", :datetime
    column "updated_at", :datetime
  end

  table "posts" do
    column "id", :key
    column "title", :string
    column "owner_id", :integer, :references => :users
    column "body", :text
    column "published_at", :datetime
    column "created_at", :datetime
    column "updated_at", :datetime
  end

  table "comments", :embed_in => :posts, :on => :post_id do
    column "id", :key
    column "body", :text
    column "post_id", :integer, :referneces => :posts
    column "user_id", :integer, :references => :users
    column "created_at", :datetime
    column "updated_at", :datetime
  end

Save the file as <tt>"translation_file.rb"</tt> and run the command:

  mongify check -c datbase.config
  mongify process translation_file.rb -c database.config

== Translation Options
When dealing with a translation, there is a few options you can set
=== Table
Tables have the ability to be embedded into another collection on durring processing by passing :embed_in => 'collection_name'.
You can also specify :on option (while embedding) to specify which field you're linking the tables together on.

=== Columns
Columns take a few more options:
  column "id", :key                                   # Columns that are primary keys and need to be marked as :key
  column "body", :text                                # Since mongo doesn't care about text fields, this will just be converted to string
  column "post_id", :integer, :referneces => :posts   # Referenced columns need to be marked as such, this will mean that they will be updated
                                                      # with the new BSON::ObjectID.
  column "created_at", :datetime                      # Specifying a field as :datetime will convert it to Time format as it
                                                      # gets imported into MongoDB

**this is subject to change during the alpha (0.0.x release)**


== Notes
I have currently only tested this in Ruby 1.8.7
More testing will be done once the basic functionality is done


== TODO
Remove Defaults from being pulled in (no need to know what it defaults to)
Remove pre_mongify_id from all collections
=== while processing
allow the ability to embed_table with a one to one relationship
Allow renaming tables
Allow renaming of columns
Allow deleting of columns
Allow running a proc on column value
Update user on what is being processed


== Development
=== Requirements
You just need bundler 1.0

  gem install bundler
  bundle install
  copy over spec/support/database.example to spec/support/database.yml and fill in required info
  rake test:mysql:setup

=== Setup
Before you can run the specs, you need to make sure to setup the spec/support/database.yml file with your database info
(you can copy database.example within the same folder).

== Special Thanks
Just want to thank my wife (Alessia) who not only puts up with me working on my free time but sometimes helps out listening to my craziness or helping me name classes or functions.
=== More Special Thanks
I'd like to thank Mon_Ouie on the Ruby IRC channel for helping me figure out how to setup the internal configuration file reading.

== License

Copyright (c) 2011 Andrew Kalek, Anlek Consulting

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
